# -*- coding: utf-8 -*-
"""spam or ham mail detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RGVkzniUy1Xa1i6aO86YfASJOe2aH0Oo
"""

#importing libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#loading data from csv file
data=pd.read_csv('/content/mail_data (1).csv')
print(data)

#replace null values with null strings
mail_data=data.where((pd.notnull(data)),'')
mail_data.head()

#checking the number of rows and columns
mail_data.shape

#label spam mail as 0 ,ham mail as 1
mail_data.loc[mail_data['Category']=='spam','Category',]=0
mail_data.loc[mail_data['Category']=='ham','Category',]=1
mail_data.head()

#seperating data into texts and label
X=mail_data['Message']
Y=mail_data['Category']
X

#splittiing data into training data and testing data
X_train,X_test,Y_train,Y_test= train_test_split(X,Y,test_size=0.2,random_state=3)
print(X.shape)
print(X_train.shape)
print(X_test.shape)

#feature extraction
#transform the text data to feature vectors that cam be used as input to the logistic regression
feature_extraction= TfidfVectorizer(min_df=1,stop_words='english',lowercase='True')
X_train_features= feature_extraction.fit_transform(X_train)
X_test_features=feature_extraction.transform(X_test)
#convert Y_train,Y_test values as integers
Y_train=Y_train.astype('int')
Y_test=Y_test.astype('int')
print(X_train)

print(X_train_features)

#training the model
#logistic regression
model=LogisticRegression()
#training the logistic regression model with the training data
model.fit(X_train_features,Y_train)

#evaluting the trrained model
#prediction on training data
y_pred_train=model.predict(X_train_features)
y_accuracy_train=accuracy_score(Y_train,y_pred_train)
print('accuracy on training data : ',y_accuracy_train)

#prediction on test data
y_pred_test=model.predict(X_test_features)
y_accuracy_test=accuracy_score(Y_test,y_pred_test)

print('accuracy on test data:',y_accuracy_test)

input_mail=['']
#convert text to feature vector
input_data_features=feature_extraction.transform(input_mail)
#making predictt
prediction=model.predict(input_data_features)
print(prediction)
if prediction[0]==1:
  print('it is an ham mail')
else:
  print('spam mail')

